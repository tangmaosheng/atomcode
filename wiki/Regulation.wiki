= 框架机制 =

经过上一节的一个简单教程，你可能靠猜差不多猜到框架是怎么加载你的程序的，又是怎么把结果给输出的。好吧，差不多你都猜对了，但框架的能力当然不仅限于此，请跟随本章进一步了解 AtomCode。

== 框架运行过程 ==

  # 执行开始会首先访问入口文件，一般会是： index.php ，入口文件在定义了常量后即开始加载框架内核文件。
  # 框架会根据URL自动判断要加载哪一个控制器，并预先指定语言和样式目录。
  # 在控制器执行时，根据需要再加载 Block、模型、助手程序、用户类库等。控制器执行结束，则将数据返回给框架。
  # 框架再根据需要调用渲染引擎，以决定是输出HTML还是JSON等格式。至此，整个程序运行结束。

综上所述，你要做的就是在控制器中调用一切你需要的资源即可。框架会通过下面的机制帮助你加载它们。

== 类加载机制 ==

使用 AtomCode 开发的过程中，你不需要再写 include 或者 require ，只要遵守命名和文件存放规范，框架就会自动帮你按需加载类。

=== 文件与类命名规范 ===

所有的目录名需要小写。类名需要与文件名一致。例如：

`application/controller/IndexController.php` 中存放的类一定是： `class IndexController`

如果要使用命名空间，则需要将文件放在同名的目录中。 *控制器类* 除外。例如，你需要定义:

{{{
namespace \samples\demo;

class Image {
}
}}}

则此类存放位置应是： application/library/samples/demo/Image.php

为了编程风格一致，请务必命名类时各单词首字母大写( *控制器类* 除外，控制器类只需要首字母大写+Controller即可)。