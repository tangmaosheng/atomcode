<?php if(version_compare(PHP_VERSION, '5.0.0','<')) { exit('Your PHP version is too old,please upgrade to 5.0.0 or newer!'); } $system_start_time = microtime(true); define('DEBUG_MODE', file_exists(APP_PATH . '/debug.lock')); DEBUG_MODE ? error_reporting(E_ALL & ~E_NOTICE) : error_reporting(0); define('SYS_PATH', implode('/', array_slice(explode('/', str_replace('\\', '/', __FILE__)), 0, -2))); if (!defined('DOCUMENT_ROOT')) define('DOCUMENT_ROOT', $_SERVER['DOCUMENT_ROOT']); $config['time_zone'] = 'PRC'; $config['CHARSET'] = 'utf-8'; $config['MODEL_PREFIX'] = ''; $config['MODEL_SUFFIX'] = 'Model'; $config['CONTAINER_PREFIX'] = 'Ctn'; $config['CONTAINER_SUFFIX'] = ''; $config['CONTROLLER_CLASS_PREFIX'] = 'Ctrl'; $config['CONTROLLER_CLASS_SUFFIX'] = ''; $config['COMPILE']['URL_REFRESH_PARAM'] = 'refresh'; $config['COMPILE']['URL_DEBUG_PARAM'] = ''; $config['COMPILE']['AUTO_CHECK'] = true; $config['VIEW_EXT'] = '.html'; $config['ROUTER']['MODE'] = 2; $config['ROUTER']['CONTROLLER'] = 'a'; $config['ROUTER']['METHOD'] = 'b'; $config['ROUTER']['PATTERN'] = array( '|^news/list/([a-z]+)(-page-(\d+))?\.html|' => array('a=news&b=list&area=$1&page=$3', 1) ); $config['ROUTER']['STATIC'] = true; $config['STATIC']['EXT'] = '.html'; $config['LOG_TYPE']['DEBUG'] = 'ERROR|DEBUG|SQL'; $config['LOG_TYPE']['RUN'] = 'ERROR|DEBUG|SQL'; ; if ( ! defined('APP_PATH')) die('Connot start application.'); function is_really_writable($file) { if (DIRECTORY_SEPARATOR == '/' AND @ini_get("safe_mode") == FALSE) { return is_writable($file); } if (is_dir($file)) { $file = rtrim($file, '/').'/'.md5(rand(1,100)); if (($fp = @fopen($file, 'ab')) === FALSE) { return FALSE; } fclose($fp); @unlink($file); return TRUE; } elseif (($fp = @fopen($file, 'ab')) === FALSE) { return FALSE; } fclose($fp); return TRUE; } function try_require() { $success	= false; foreach (func_get_args() as $file) { if (file_exists(strtolower($file))) { require $file; $success = true; break; } } return $success; } function &load_class($class, $instantiate = TRUE,$path = 'libraries') { if (!class_exists($class)) { try_require( APP_PATH . strtolower(DIRECTORY_SEPARATOR . $path . DIRECTORY_SEPARATOR . $class . '.class.php'), SYS_PATH . strtolower(DIRECTORY_SEPARATOR . $path . DIRECTORY_SEPARATOR . $class . '.class.php')); } if (class_exists($class)) { if ($instantiate) { return new $class(); } return TRUE; } return FALSE; } function &load_model($model) { global $var; $model = $var->config['MODEL_PREFIX'] . $model . $var->config['MODEL_SUFFIX']; return load_class($model, TRUE, 'models'); } function &load_container($container) { global $var; $pieces	= explode('.', $container); $class = array_pop($pieces); array_unshift($pieces, 'containers'); $class = $var->config['CONTAINER_PREFIX'] . $class . $var->config['CONTAINER_SUFFIX']; return load_class($class, TRUE, implode(DIRECTORY_SEPARATOR, $pieces)); } function load_helper($helper, $read=0) { static $objects = array(); if (isset($objects[$helper])) { return $objects[$helper]; } if ($read) { if (file_exists(APP_PATH . strtolower(DIRECTORY_SEPARATOR . 'helpers' . DIRECTORY_SEPARATOR . $helper . '.php'))) { return file_get_contents(APP_PATH . strtolower(DIRECTORY_SEPARATOR . 'helpers' . DIRECTORY_SEPARATOR . $helper . '.php')); } elseif (file_exists(SYS_PATH . strtolower(DIRECTORY_SEPARATOR . 'helpers' . DIRECTORY_SEPARATOR . $helper . '.php'))) { return file_get_contents(SYS_PATH . strtolower(DIRECTORY_SEPARATOR . 'helpers' . DIRECTORY_SEPARATOR . $helper . '.php')); } else { return ''; } } return $objects[$helper] = try_require( APP_PATH . strtolower(DIRECTORY_SEPARATOR . 'helpers' . DIRECTORY_SEPARATOR . $helper . '.php'), SYS_PATH . strtolower(DIRECTORY_SEPARATOR . 'helpers' . DIRECTORY_SEPARATOR . $helper . '.php')); } function &load_factory($factory, $driver = '') { load_class($factory,FALSE,'factory/' . $factory); eval('$s='.$factory . " :: getInstance('$driver');"); return $s; } function load_config($config_name) { static $objects = array(); global $config; if (isset($objects[$config_name])) { return $objects[$config_name]; } return $objects[$config_name] = try_require(APP_PATH . strtolower(DIRECTORY_SEPARATOR . 'configs' . DIRECTORY_SEPARATOR . $config_name . '.cfg.php')); } function &load_lang($lang_name) { static $objects = array(); global $lang,$var; if (isset($objects[$lang_name])) { return $objects[$lang_name]; } if (file_exists(APP_PATH . '/language/' . $var->config['lang'] . '/' . $lang_name . '.lang.php')) { require(APP_PATH . '/language/' . $var->config['lang'] . '/' . $lang_name . '.lang.php'); return $lang; } else { return false; } } function &get_config() { global $config; static $loaded = false; if (!$loaded) { if (!file_exists(APP_PATH . '/configs/config.php')) { exit('The configuration file `config.php` does not exist.'); } require(APP_PATH . '/configs/config.php'); if ( ! isset($config) OR ! is_array($config)) { exit('Your config file does not appear to be formatted correctly.'); } $loaded = true; } return $config; } function xaddslashes($string, $force = 0) { !defined('MAGIC_QUOTES_GPC') && define('MAGIC_QUOTES_GPC', get_magic_quotes_gpc()); if(!MAGIC_QUOTES_GPC || $force) { if(is_array($string)) { foreach($string as $key => $val) { $string[$key] = xaddslashes($val, $force); } } else { $string = addslashes($string); } } return $string; } function to_guid_string($mix) { if(is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif(is_resource($mix)) { $mix = get_resource_type($mix).strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function is_instance_of($object, $class_name) { if (!is_object($object) && !is_string($object)) { return false; } return $object instanceof $class_name; } function get_instance_of($class_name,$method='',$args=array()) { static $_instance = array(); if(empty($args)) { $identify = $class_name.$method; } else { $identify = $class_name.$method.to_guid_string($args); } if (!isset($_instance[$identify])) { if(class_exists($class_name)) { $o = new $class_name(); if(method_exists($o,$method)) { if(!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else { $_instance[$identify] = $o; } } else { trigger_error('class not exists.', E_USER_ERROR); } } return $_instance[$identify]; } function auto_charset($contents,$from='',$to='') { global $var; if(empty($from)) $from = $var->config['CHARSET']; if(empty($to)) $to = $var->config['CHARSET']; $from = strtoupper($from)=='UTF8'? 'utf-8':$from; $to = strtoupper($to)=='UTF8'? 'utf-8':$to; if( strtoupper($from) === strtoupper($to) || empty($contents) || (is_scalar($contents) && !is_string($contents))) { return $contents; } if(is_string($contents)) { if(function_exists('mb_convert_encoding')) { return mb_convert_encoding ($contents, $to, $from); } elseif(function_exists('iconv')) { return iconv($from,$to,$contents); } else { throw new Exception('Extension for encoding convert is not exists.'); return $contents; } } elseif(is_array($contents)) { foreach ( $contents as $key => $val ) { $_key = auto_charset($key,$from,$to); $contents[$_key] = auto_charset($val,$from,$to); if($key != $_key ) { unset($contents[$key]); } } return $contents; } elseif(is_object($contents)) { $vars = get_object_vars($contents); foreach($vars as $key=>$val) { $contents->$key = auto_charset($val,$from,$to); } return $contents; } else { return $contents; } } function mk_dir($dir, $mode = 0755) { if (is_dir($dir) || @mkdir($dir,$mode)) return true; if (!mk_dir(dirname($dir),$mode)) return false; return @mkdir($dir,$mode); } function is_post() { return strtolower($_SERVER['REQUEST_METHOD']) == 'post'; } function is_ajax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH'])) { if(strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])=='xmlhttprequest') return true; } if(!empty($_POST[$var->config['VAR_AJAX_SUBMIT']]) || !empty($_GET[$var->config['VAR_AJAX_SUBMIT']])) { return true; } return false; } function load_data($base,$next_url,$fn) { $path = APP_PATH . '/cache/' . $base . '/' . str_replace('.','/',$next_url) . '/' . $fn; if (!is_file($path))return false; return file_get_contents($path); } function save_data($base, $next_url, $fn, $content) { $path = APP_PATH . '/cache/' . $base . '/' . str_replace('.','/',$next_url); mk_dir($path); $path .= '/' . $fn; return file_put_contents($path,$content); } function exec_time() { global $system_start_time; $Time = microtime(true); if (!is_float($Time))$Time = array_sum(explode(' ',$Time)); $exec_time = $Time - $system_start_time; $system_start_time = $Time; return $exec_time; } function encrypt($string,$encode=true,$key = '') { global $var; $key = md5(($key) ? $key : $var->config['key']['cookie']); $key_length = strlen($key); $string = !$encode ? base64_decode($string):substr(md5($string.$key),0,8).$string; $string_length = strlen($string); $rnd_key = $box = array(); $result = ''; for($i = 0;$i <= 255;$i++){ $rnd_key[$i] = ord($key{$i % $key_length}); $box[$i] = $i; } for($j = $i = 0;$i < 256;$i++){ $j = ($j + $box[$i] + $rnd_key[$i])% 256; $tmp = $box[$i]; $box[$i] = $box[$i]; $box[$j] = $tmp; } for($a = $j = $i = 0;$i < $string_length;$i++){ $a = ($a + 1)% 256; $j = ($j + $box[$a])% 256; $tmp = $box[$a]; $box[$a] = $box[$j]; $box[$j] = $tmp; $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256])); } if(!$encode){ if(substr($result,0,8) == substr(md5(substr($result,8).$key),0,8)){ return substr($result,8); }else{ return ''; } }else{ return str_replace('=','',base64_encode($result)); } } function get_ip() { if (getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'),'unknown')){ $user_ip = getenv('HTTP_CLIENT_IP'); } elseif (getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'),'unknown')){ $user_ip = getenv('HTTP_X_FORWARDED_FOR'); } elseif (getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'),'unknown')){ $user_ip = getenv('REMOTE_ADDR'); } elseif (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'],'unknown')){ $user_ip = $_SERVER['REMOTE_ADDR']; } if (!is_ip($user_ip)){ $user_ip = 'unknown'; } return $user_ip; } function is_ip($ip) { $ips = explode('.',$ip); if(count($ips) && $ips[0] > 0 && $ips[0] < 255 && $ips[1] >= 0 && $ips[1] <= 255 && $ips[2] >= 0 && $ips[2] <= 255 && $ips[3] >= 0 && $ips[3] <= 255) { return TRUE; } return FALSE; } function random($length , $only_num = 1){ if($only_num){ return sprintf("%0".$length."d",mt_rand(0,pow(10,$length))); }else{ $hash_base = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"; $max_value = strlen($hash_base) - 1; $hash = ''; for($i = 0;$i < $length;$i++){ $hash .= $hash_base{mt_rand(0,$max_value)}; } return $hash; } } function parse_time_to_second($str) { if (is_numeric($str)) { return intval($str); } else { $str = strtolower($str); $total = 0; $num = ''; $units = array( 's' => 1, 'm' => 60, 'h' => 3600, 'd' => 86400, 'w' => 604800, 'l' => 2592000, 'y' => 31536000, ); for ($i = 0; $i < strlen($str); $i ++) { $char = $str{$i}; if (is_numeric($char)) { $num .= $char; } elseif (array_key_exists($char,$units)) { $total += intval($num) * $units[$char]; $num = ''; } } if ($num) { $total += $num; } } return $total; } function get_ext($filename) { return strtolower(trim(substr(strrchr($filename, '.'), 1))); } function is_reserved($word) { $reserved = ',list,new,and,or,xor,array,as,break,case,class,const,continue,default,do,else,empty,exit,for,function,global,if,switch,use,var,while,final,public,extends,private,protected,abstract,clone,try,catch,throw,this,static,'; return strpos($reserved, ",$word,") !== false; } if (!function_exists('lcfirst')) { function &lcfirst(&$string) { $string{0} = strtolower($string{0}); return $string; } }; $var = new stdClass(); $var->config = & get_config(); date_default_timezone_set($var->config['time_zone']); $var->controller = $var->method = ''; $var->get = xaddslashes($_GET); if ($var->config['ROUTER']['MODE'] == 1) { $url = trim($_SERVER['REDIRECT_URL'], ' /'); $query_string = trim($_SERVER['REDIRECT_QUERY_STRING']); } elseif ($var->config['ROUTER']['MODE'] == 2) { $url = trim($_SERVER['PATH_INFO'], ' /'); } elseif ($var->config['ROUTER']['MODE'] == 3) { $var->get = array(); $url = trim($_SERVER['QUERY_STRING'] . $_SERVER['PATH_INFO'], '/'); } $unprocessed = true; parse_str($query_string, $query_string_arr); if ($var->config['ROUTER']['MODE'] && is_array($var->config['ROUTER']['PATTERN'])) { foreach ($var->config['ROUTER']['PATTERN'] as $pattern => $replace) { if (preg_match($pattern, $url)) { $unprocessed = false; $url = preg_replace($pattern, $replace[0], $url); $var->static_file = $url; $var->is_static = $replace[1]; parse_str($url, $url_get); $var->get = array_merge($var->get, $url_get, $query_string_arr); break; } } } if ($unprocessed && $var->config['ROUTER']['MODE']) { if ($url && $var->config['STATIC']['EXT'] && preg_match('!^' . preg_quote('index' . $var->config['STATIC']['EXT']) . '$!', $url)) { $var->is_static = true; $var->static_file = $url; $url = substr($url, 0, 0 - strlen($var->config['STATIC']['EXT']) - 5); } elseif (preg_match('!' . preg_quote($var->config['STATIC']['EXT']) . '$!', $url)) { $var->is_static = true; $var->static_file = $url; $url = preg_replace('!' . preg_quote($var->config['STATIC']['EXT']) . '$!', '', $url); } if ($var->is_static) { $var->static = $var->config['ROUTER']['STATIC']; } $url_get = explode('/', $url); $url_get[0] && $var->get[$var->config['ROUTER']['CONTROLLER']] = $url_get[0]; $url_get[1] && $var->get[$var->config['ROUTER']['METHOD']] = $url_get[1]; $get2 = array(); for($i = 2; $i < count($url_get); $i += 2) { $get2[$url_get[$i]] = $url_get[$i + 1]; } $var->get = array_merge($var->get, $get2, $query_string_arr); } $var->controller = $var->get[$var->config['ROUTER']['CONTROLLER']]; $var->method = $var->get[$var->config['ROUTER']['METHOD']]; unset($url); unset($query_string); unset($query_string_arr); unset($url_get); unset($get2);; $var->input = $var->get; $var->request_method = strtolower($_SERVER['REQUEST_METHOD']); if (is_post()) { foreach ($_POST as $k => $v) { $var->post[$k] = xaddslashes($v); $var->input[$k] = $var->post[$k]; } } class Cookie { public static function exists($name) { return isset($_COOKIE[$name]); } public static function get($name) { global $var; $value = $_COOKIE[$name]; if ($var->config['cookie']['key']) { $value = self::_decrypt($value, $var->config['cookie']['key']); } return $value; } public static function set($name, $value, $expire='', $path='', $domain='') { global $var; $expire	= isset($var->config['cookie']['expire']) && empty($expire) ? $var->config['cookie']['expire'] : $expire; $path	= isset($var->config['cookie']['path']) && empty($path) ? $var->config['cookie']['path'] : $path; $domain	= isset($var->config['cookie']['domain']) && empty($domain) ? $var->config['cookie']['domain'] : $domain; if ($var->config['cookie']['key']) { $value	= self::_encrypt($value, $var->config['cookie']['key']); } setcookie($name, $value, $expire, $path, $domain); $_COOKIE[$name] = $value; } public static function delete($name) { self::set($name, '', time() - 3600); unset($_COOKIE[$name]); } public static function deleteAll() { self::clear(); } public static function clear() { foreach ($_COOKIE as $k => $v) { self::delete($k); } } private static function _encrypt($value, $key) { return $value; } private static function _decrypt($value, $key) { return $value; } }; class Session { public static function start() { return session_start(); } public static function pause() { return session_write_close(); } public static function exists($name) { return array_key_exists($name, $_SESSION); } public static function set($name, $value) { $_SESSION[$name] = $value; } public static function get($name) { return $_SESSION[$name]; } public static function clear() { session_destroy(); unset($_SESSION); } }; foreach ($_COOKIE as $k => $v) { $var->cookie[$k] = Cookie::get($k); } Session::start(); $var->session = &$_SESSION; class Application { private $defaultController = 'welcome'; private $defaultMethod = 'index'; private $subDir = ''; public $controller = ''; public $method = ''; public function setDefault($controller,$method) { $this->defaultController = $controller; $this->defaultMethod = $method; } public function setSubDir($dir) { $this->subDir = trim($dir,'/\\'); } private function init() { global $var; $this->controller = empty($var->controller) ? $this->defaultController : $var->controller; $this->method = empty($var->method) ? $this->defaultMethod : $var->method; } public function display() { global $var; $this->init(); $a = $this->controller; $b = $this->method; $a = str_replace(' ', '', ucwords(strtolower(str_replace('-', ' ', $a)))); $b = str_replace(' ', '', lcfirst(ucwords(strtolower(str_replace('-', ' ', $b))))); $controller = $var->config['CONTROLLER_CLASS_PREFIX'] . $a . $var->config['CONTROLLER_CLASS_SUFFIX']; $filename = (empty($this->subDir) ? '' : $this->subDir . '/') . $controller . '.class.php'; if (!try_require(APP_PATH . '/controllers/' . $filename) || !class_exists($controller)) { exit("Missing controller `$a`"); } $c = new $controller(); if (is_reserved($b)) { $b = '_' . $b; } if (!method_exists($c, $b)) { exit("Missing method $a::$b"); } $c->$b(); } }; abstract class Model { protected $config; protected $input; protected $get; protected $post; protected $cookie; protected $session; protected $lang; function __construct() { global $var, $lang; $this->config	=& $var->config; $this->input	=& $var->input; $this->get =& $var->get; $this->post =& $var->post; $this->cookie	=& $var->cookie; $this->session	=& $var->session; $this->lang =& $lang; } }; abstract class DbModel extends Model { var $ins_data; var $dbs; var $db; var $table; var $in_var; var $tpl; var $upload; var $query; var $order; var $orders; var $limit; var $pageSize; var $db_insert_id; var $page; var $where = array(); var $join = array(); var $from = array(); var $groupby = array(); var $having = array(); var $prefix = ''; var $lastId; protected $get; protected $post; protected $input; protected $cookie; protected $session; protected $request_method; protected $config; protected $defaultDb; public function __construct() { parent::__construct(); $this->dbs = Db::getInstance(); if ($this->config['DB']['DEPLOY_TYPE'] && $this->config['DB']['DEFAULT']) { $this->defaultDb	= $this->config['DB']['DEFAULT']; $this->switchDb($this->defaultDb); } elseif($this->config['DB']['DEPLOY_TYPE']) { $this->defaultDb = key($this->dbs); $this->switchDb($this->defaultDb); } else { $this->db =& $this->dbs; $this->prefix	= $var->config['DB']['PREFIX']; } $this->lastId = &$this->db_insert_id; } public function switchDb($db) { if ($this->config['DB']['DEPLOY_TYPE']) { $this->db = & $this->dbs[$db]; $this->prefix	= $this->config['DB'][$db]['PREFIX']; } } public function set($var,$value = null,$modified = 1) { if (is_array($var)) { foreach ($var as $key => $val) { if ($key != '') { $this->ins_data[$key] = $val; $this->modified[$key] = $modified; } } } else { $this->ins_data[$var] = $value; $this->modified[$var] = $modified; } } public function cleanData() { unset($this->ins_data); } public function cleanConditions() { unset($this->where); unset($this->conditions); unset($this->from); unset($this->join); unset($this->join_table); unset($this->groupby); unset($this->groupby_where); unset($this->having); unset($this->having_where); unset($this->order); unset($this->orders); unset($this->limit); } public function ensql($data) { return mysql_escape_string($data); } public function insert($table) { $ins_data_num = count($this->ins_data); $foreach_i = 0; $query = "Insert into " . $this->getTable($table) . " \n(\n"; $query_key = ""; $query_val = ""; foreach($this->ins_data as $key=>$val) { if($foreach_i == 0) { $query_key .= $key; if($this->modified[$key]) { $query_val .= "'" . $this->ensql($val) . "'"; } else { $query_val .= $this->ensql($val); } } else { $query_key .= ",\n{$key}"; if($this->modified[$key]) { $query_val .= ",\n'" . $this->ensql($val) . "'"; } else { $query_val .= ",\n" . $this->ensql($val); } } $foreach_i = $foreach_i + 1; } $query .= $query_key . "\n) \nValues \n(\n" . $query_val . "\n)"; $this->cleanData(); $this->query = $query; if($result = $this->db->Execute($query)) { $this->db_insert_id = $this->db->getInsertID(); return true; } else { return false; } } public function where($field,$value,$terms = "=",$type = "and",$modify = 1) { $prefix = (count($this->where) == 0) ? '' : $type . ' '; if(strtolower($terms) == 'in' || strtolower($terms) == 'not in') { $this->where[] = $prefix . $field . ' ' . $terms . ' (' . $value . ')'; } elseif(strtolower($terms) == 'like') { $this->where[] = $prefix . $field . ' ' . $terms . " '" . $value . "'" ; } else { if($modify) { $value = "'" . $value . "'"; } $this->where[] = $prefix . $field . ' ' . $terms . ' ' . $value; } $this->conditions = implode(" ",$this->where); } public function addWhere($where) { $this->where[] = $where; } public function getTable($table) { $ts = explode(' ',$table); $ts[0] = $this->prefix . $ts[0]; return trim("`$ts[0]` $ts[1]"); } public function from($table) { $this->from[] = $this->getTable(trim($table)); $this->from_table = implode(",",$this->from); } public function join($table, $cond, $type = '') { $table = $this->getTable($table); if ($type != '') { $type = strtoupper(trim($type)); if ( ! in_array($type, array('LEFT', 'RIGHT', 'OUTER', 'INNER', 'LEFT OUTER', 'RIGHT OUTER'))) { $type = ''; } else { $type .= ' '; } } if (preg_match('/([\w\.]+)([\W\s]+)(.+)/', $cond, $match)) { $cond = $match[1] . $match[2] . $match[3]; } $this->join[] = $type . 'JOIN ' . $table . ' ON ' . $cond; $this->join_table = " " . implode(" ",$this->join); } public function leftJoin($table,$cond) { $this->join($table,$cond,'left'); } public function rightJoin($table,$cond) { $this->join($table,$cond,'right'); } public function innerJoin($table,$cond) { $this->join($table,$cond,'inner'); } public function groupBy($field) { $this->groupby[] = $field; $this->groupby_where = " GROUP BY " . implode(",",$this->groupby) . ' '; } public function having($field,$value,$terms = '=', $type = 'and') { $prefix = (count($this->having) == 0) ? '' : $type . ' '; if (is_null($value)) { $value = ' IS NULL'; } if(!is_integer($value)) { $value = "'" . $value . "'"; } if(strtolower($terms) == 'in' || strtolower($terms) == 'not in') { $this->having[] = $prefix . $field . ' ' . $terms . ' (' . $value . ')'; } else { $this->having[] = $prefix . $field . ' ' . $terms . ' ' . $value; } $this->having_where = " HAVING " . implode(" ",$this->having) . ' '; } public function limit($limit) { if ($limit > 0) { $this->limit = $limit; $this->pageSize = $limit; } } public function orderBy($order = 'ID desc') { $orders = explode(' ',$order); $this->order[$orders[0]] = $order; $this->orders = ' order by ' . implode(',',$this->order); } public function page($page) { $this->page = $page; } public function update($table) { try { $foreach_i = 0; $query = "update " . $this->getTable($table) . " set "; $query_key = ""; $query_val = ""; $where = $this->conditions ? ' where ' . $this->conditions : ''; foreach($this->ins_data as $key=>$val) { if($foreach_i == 0) { $query_key = "{$key}"; if($this->modified[$key]) { $query_val = "='" . $this->ensql($val) . "'"; } else { $query_val = "=" .$this->ensql($val); } $query .= $query_key . $query_val; } else { $query_key = ",{$key}"; if($this->modified[$key]) { $query_val = "='" . $this->ensql($val) . "'"; } else { $query_val = "=" . $this->ensql($val); } $query .= $query_key . $query_val; } $foreach_i = $foreach_i + 1; } $query .= " $where"; $this->cleanConditions(); $this->cleanData(); if($this->db->query($query)) { return true; } else { return false; } } catch (MySqlException $e) { $e->showError(); } } public function delete($table) { $where = $this->conditions ? ' where ' . $this->conditions : ''; if(isset($this->orders)) { $order = ' ' . $this->orders; } if(isset($this->page) && isset($this->limit)) { $offset = ($this->page - 1) * $this->limit; $limit = ' limit ' . $this->limit; $this->page_limit = $limit; } $query = "Delete From " . $this->getTable($table) . $where . $order . $this->page_limit; $this->cleanConditions(); if($this->db->Execute($query)) { return true; } else { return false; } } public function count($table) { $this->from($table); $where = $this->conditions ? ' where ' . $this->conditions : ''; $this->cleanConditions(); $sql = "select count(*) as Num from " . $this->from_table . $where; $result = $this->db->getRow($sql); return $result['Num']; } public function getOne($table,$select = '*') { $this->from($table); $where = $this->conditions ? ' where ' . $this->conditions : ''; try { $sql = "select " . $select ." from " . $this->from_table . $this->join_table . $where . $this->groupby_where . $this->having_where . $this->orders; $this->cleanConditions(); $result = $this->db->getRow($sql); return $result; } catch (MySqlException $e) { $e->showError(); } } public function select($table,$select = '*') { $this->from($table); $where = $this->conditions ? ' where ' . $this->conditions : ''; if(isset($this->orders)) { $order = ' ' . $this->orders; } if(isset($this->page) && isset($this->limit)) { $offset = ($this->page - 1) * $this->limit; $limit = ' limit ' . $this->limit . ' offset ' . $offset; $this->page_limit = $this->limit; } $this->query = "select " . $select . " from " . $this->from_table . $this->join_table . $where . $this->groupby_where . $this->having_where . $order . $limit; $this->cleanConditions(); $result = $this->db->Execute($this->query); while(!$result->EOF) { $list[] = $result->fields; $result->moveNext(); } return $list; } public function query($sql,$type = 1) { $this->query = $sql; if($type == 1) { $result = $this->db->Execute($this->query); while(!$result->EOF) { $list[] = $result->fields; $result->moveNext(); } return $list; } else { $result = $this->db->getRow($this->query); return $result; } } public function getPageInfo() { if ($this->query) { $pattern = '/select (.*?) from (.*)limit(.*)/i'; $replacement = 'select count(*) as num from $2'; $count_query = preg_replace($pattern, $replacement, $this->query); $result = $this->db->getRow($count_query); $page_info['result_count']	= $result['num']; $page_info['page_count']	= ceil($result['num'] / $this->pageSize); $page_info['current_page']	= $this->page; unset($this->pageSize); unset($this->page); return $page_info; } else { return false; } } }; class Db { var $prefix = ''; var $logger; function DB() { } static function &getInstance() { global $var; return DbFactory::getDBConnection($var->config['DB']); } } class DbFactory { function &getDBConnection($params) { static $instance; if (!isset($instance)) { if ($params['DEPLOY_TYPE']) { foreach ($params as $key => $value) { if (!is_array($value)) continue; $file = SYS_PATH . '/factories/db/drivers/db' . $value['TYPE'] . '.class.php'; $class = 'Db' . ucfirst($value['TYPE']); if (!class_exists($class))require $file; $instance[$key] = &new $class(); try { $instance[$key]->init($value); } catch (MySqlException $e) { $e->showError(); } } } else { $file = SYS_PATH . '/factories/db/drivers/db' . $params['TYPE'] . '.class.php'; $class = 'Db' . ucfirst($params['TYPE']); if (!class_exists($class))require $file; $class = ucfirst($params['TYPE']); $instance = new $class(); try { $instance->init($params); } catch (MySqlException $e) { $e->showError(); } } } return $instance; } }; class DbMysql extends Db { var $connection; var $fields = array(); var $EOF = 0; var $FetchMode = 'assoc'; var $result; var $params; function init($params) { $this->params = $params; } function connect() { $GLOBALS['EXECS'] = 0; if (!$this->connection) { $this->connection = @mysql_connect($this->params['HOST'],$this->params['USER'],$this->params['PASS'],1); } else { return true; } if (!$this->connection) { return false; } if(!empty($this->params['NAME'])) { if(!$this->selectDB($this->params['NAME'])) { return false; } } if(!empty($this->params['CHARSET'])) { @mysql_query("set names '" . $this->params['CHARSET'] . "'",$this->connection); } return true; } function selectDB($db) { return mysql_select_db($db,$this->connection); } function close() { @mysql_close($this->connection); } function query($query) { $this->connect(); $GLOBALS['EXECS']++; $result =& mysql_query($query, $this->connection); return $result; } function Execute($query) { $this->result = $this->query($query); if($this->result) { if($this->FetchMode == 'num') { if($this->fields = @mysql_fetch_array($this->result, MYSQL_NUM)) $this->EOF = 0; else $this->EOF = 1; } elseif($this->FetchMode == 'assoc') { if($this->fields = @mysql_fetch_array($this->result, MYSQL_ASSOC)) $this->EOF = 0; else $this->EOF = 1; } else { if($this->fields = mysql_fetch_array($this->result)) $this->EOF = 0; else $this->EOF = 1; } } else { $this->EOF = 1; } return $this; } function moveNext() { if($this->FetchMode == 'num') { if($this->fields = mysql_fetch_array($this->result, MYSQL_NUM)) $this->EOF = 0; else $this->EOF = 1; } elseif($this->FetchMode == 'assoc') { if($this->fields = mysql_fetch_array($this->result, MYSQL_ASSOC)) $this->EOF = 0; else $this->EOF = 1; } else { if($this->fields = mysql_fetch_array($this->result)) $this->EOF = 0; else $this->EOF = 1; } } function getRow($query) { $Query = $this->query($query); $GLOBALS[EXECS]++; $Query = mysql_fetch_array($Query, MYSQL_ASSOC); return $Query; } function fetchRow() { return mysql_fetch_array($this->result, MYSQL_ASSOC); } function fetch_array($query) { $Query = mysql_fetch_array($query); return $Query; } function selectLimit($query, $start = NULL, $offset = NULL) { if(empty($offset) && empty($start)) $query = $query; elseif(empty($offset) && !empty($start)) $query = $query." LIMIT $start"; elseif(!empty($offset) && !empty($start)) $query = $query." LIMIT $start, $offset"; $this->result = $this->query($query); if($this->result) { $this->fields = mysql_fetch_array($this->result, MYSQL_ASSOC); $this->EOF = 0; } else { $this->EOF = 1; } return $this; } function freeResult($query) { mysql_free_result($query); } function getInsertID() { return mysql_insert_id(); } function errormsg() { $result["message"] = mysql_error($this->connection); $result["code"] = mysql_errno($this->connection); return $result; } function error() { return mysql_error(); } function errno() { return mysql_errno(); } function escape_string($string) { return mysql_real_escape_string($string); } function setFetchMode($mode) { $this->FetchMode = $mode; } function FieldCount() { return mysql_num_fields($this->result); } function info() { $this->connect(); return mysql_get_server_info(); } function recordCount($query) { $query	= $this->query($query); return mysql_num_rows($query); } } ; class View { private $var; public $config; public $input; public $get; public $post; public $cookie; public $session; private $static; private $static_file; private $tagValue; private $tagLevel; private $useLevel; private $sourceFile; private $cacheFile; private $viewFolder; public function __construct() { global $var, $lang; $this->config	=& $var->config; $this->input	=& $var->input; $this->get =& $var->get; $this->post =& $var->post; $this->cookie	=& $var->cookie; $this->session	=& $var->session; $this->lang =& $lang; $this->static	=& $var->is_static; $this->static_file	=& $var->static_file; $this->viewExt	= empty($this->config['view_ext']) ? '.html' : $this->config['view_ext']; $this->tagValue = array(); $this->tagLevel = 0; $this->useLevel = 0; } public function assign($name,$value = null) { if (is_array($name)) { foreach ($name as $key => $value) { if ($key !== '')$this->tagValue[0][$key] = $value; } } else { if ($name !== '')$this->tagValue[0][$name] = $value; } } public function delete($name) { unset($this->tagValue[0][$name]); } public function setFolder($folder) { $this->viewFolder = trim($folder, ' /\\'); } public function display($view) { $this->render($view); } public function render($view) { $html = $this->getData($view); if ($this->static) { } echo $html; } private function getView($view) { $this->sourceFile = APP_PATH . '/views/' . $view . $this->viewExt; $this->cacheFile = APP_PATH . '/cache/views/' . $view . '.php'; } public function getData($view) { $this->getView($view); if ($this->needRefresh()) { $this->refresh(); } if ($this->config['gzip']) { ob_start('ob_gzhandler'); } else { ob_start(); } include $this->cacheFile; $content = ob_get_contents(); ob_end_clean(); return $content; } private function needRefresh() { if (!file_exists($this->cacheFile)) { return true; } if (!DEBUG_MODE) { return false; } if ($this->config['COMPILE']['AUTO_CHECK'] && filemtime($this->cacheFile) < filemtime($this->sourceFile)) { return true; } if ($this->config['COMPILE']['URL_REFRESH_PARAM'] && $this->get[$this->config['COMPILE']['URL_REFRESH_PARAM']]) { return true; } return false; } private function refresh() { $compiler = &load_class('compile'); $compiler->sourceFile = $this->sourceFile; $compiler->cacheFile = $this->cacheFile; $compiler->parseFile(); } } ; class Controller { protected $config,$input,$get,$post,$cookie,$session,$request_method, $isPost; protected $_view,$viewPath; public function __construct() { global $var; $this->config =& $var->config; $this->get =& $var->get; $this->post =& $var->post; $this->input =& $var->input; $this->cookie =& $var->cookie; $this->session =& $var->session; $this->request_method	= $var->request_method; $this->method = $var->method; $this->controller = $var->controller; $this->isPost = is_post(); $this->_view = new View(); if (method_exists($this,'_init')) { $this->_init(); } } protected function _assign($name,$value) { $this->_view->assign($name,$value); } protected function _display($view) { $this->_render($view); } protected function _render($view) { if ($this->viewPath) $view = trim($this->viewPath,'/\\') . '/' . $view; $this->_view->render($view); } public function __call($name,$args) { $name = ltrim($name, '_'); $this->_display($name); } }; class Container { protected $config,$input,$get,$post,$cookie,$session,$request_method, $isPost; public function __construct() { global $var; $this->config =& $var->config; $this->get =& $var->get; $this->post =& $var->post; $this->input =& $var->input; $this->cookie =& $var->cookie; $this->session =& $var->session; $this->request_method	= $var->request_method; $this->isPost = is_post(); } };